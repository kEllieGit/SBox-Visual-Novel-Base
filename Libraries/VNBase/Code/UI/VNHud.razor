@using Sandbox;
@using System;
@using System.Linq;
@using SandLang;

@namespace VNBase.UI

@attribute [Title( "VN Hud" )]
@attribute [Category( "VNBase" )]
@inherits PanelComponent

@if ( Player.IsValid() )
{
    <root class="@( Player.IsScriptActive ? "" : "hidden" )" style="background-image: url('@( Player.State.Background )')">
        <CharacterPortraits Player="@Player" Settings="@Player.Settings" Hud="@this"/>
        <Choices Player="@Player" Settings="@Player.Settings" Hud="@this"/>
        <DialogueBox Player="@Player" Settings="@Player.Settings" Hud="@this"/>

        @if ( ShouldShowInput )
        {
            <TextInput Player="@Player" Settings="@Player.Settings" Hud="@this"/>
        }

        @if ( Player.Settings.IsValid() && Player.Settings.ControlPanelEnabled )
        {
            <ControlPanel Player="@Player" Settings="@Player.Settings" Hud="@this"/>
        }
    </root>
}

@code {
    #nullable enable
    [Property, RequireComponent] public ScriptPlayer? Player { get; set; }

    private Dialogue.Input? Input => Player?.ActiveLabel?.ActiveInput;
    private bool ShouldShowInput => Player?.State.IsDialogueFinished == true && Input is not null;

    protected override void OnStart()
    {
        // This is an ugly hack to replace default FP styles
        StyleHack();

        try
        {
            Player = Scene.GetAllComponents<ScriptPlayer>().First();
        }
        catch ( InvalidOperationException )
        {
            ScriptPlayer.Log.Warning( "No ScriptPlayer assigned to VNHud and VNHud could not find a ScriptPlayer in the scene!" );
        }
    }

    public T? GetSubPanel<T>() where T : SubPanel
    {
        return Panel.ChildrenOfType<T>().FirstOrDefault();
    }

    private void StyleHack()
    {
        var root = Panel.FindRootPanel();
        foreach ( var stylesheet in root.AllStyleSheets.ToList() )
        {
            root.StyleSheet.Remove( stylesheet );
        }

        root.StyleSheet.Load( "/UI/VNHud.razor.scss" );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine( Player, Player?.IsScriptActive, Player?.ActiveScript, Player?.State.GetHashCode() );
    }
}
